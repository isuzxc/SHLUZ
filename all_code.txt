app.py
from flask import Flask, render_template, request, jsonify
import serial
import time

app = Flask(__name__)

# Настройки Serial
serial_port = 'COM3'
baud_rate = 9600
arduino = None

try:
    arduino = serial.Serial(serial_port, baud_rate, timeout=1)
    time.sleep(2)
except Exception as e:
    print(f"Serial error: {e}")

# Состояния устройств
device_states = {
    "motorA1A2": "stop",  # up, down, stop
    "motor8_11": "stop",  # up, down, stop
    "servo2_3": "close",  # open, close
    "servo4_5": "close",  # open, close
    "led1": "off",        # on, off
    "led2": "off"         # on, off
}

# Данные о расходе воды
water_data = {
    "total_water": 0.0,  # Общий расход воды (литры)
    "flow_rate": 0.0     # Скорость потока (литры/минуту)
}

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/get_states', methods=['GET'])
def get_states():
    return jsonify(device_states)

@app.route('/get_water_flow', methods=['GET'])
def get_water_flow():
    return jsonify(water_data)

@app.route('/update_state', methods=['POST'])
def update_state():
    data = request.json
    device = data.get('device')
    state = data.get('state').lower()

    if device in device_states:
        device_states[device] = state
        if arduino and arduino.is_open:
            command = f"{device.upper()}_{state.upper()}\n"
            print(f"Sending command: {command}")  # Отладочное сообщение
            arduino.write(command.encode())
        return jsonify({"status": "success", "device": device, "state": state})
    else:
        return jsonify({"status": "error", "message": "Invalid device"}), 400

@app.route('/reset_water_counter', methods=['POST'])
def reset_water_counter():
    if arduino and arduino.is_open:
        arduino.write(b"RESET_WATER\n")
    water_data["total_water"] = 0.0
    return jsonify(water_data)

# Функция для обновления данных о расходе воды
def update_water_data():
    if arduino and arduino.is_open:
        arduino.write(b"GET_WATER_DATA\n")
        response = arduino.readline().decode().strip()
        if response:
            try:
                total_water, flow_rate = map(float, response.split(','))
                water_data["total_water"] = total_water
                water_data["flow_rate"] = flow_rate
                print(total_water, flow_rate)
            except ValueError:
                print("Invalid water data format")

# Периодическое обновление данных о расходе воды
def water_data_updater():
    while True:
        update_water_data()
        time.sleep(1)

if __name__ == '__main__':
    import threading
    threading.Thread(target=water_data_updater, daemon=True).start()
    app.run(host='0.0.0.0', port=5000)

index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Arduino Mega Control</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }
        h1 {
            color: #333;
        }
        .control-group {
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        button {
            padding: 10px 20px;
            font-size: 16px;
            margin: 5px;
        }
        .status-indicator {
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: #ccc;
            transition: background 0.3s;
        }
        .status-indicator.on {
            background: #4CAF50;
        }
        .status-indicator.off {
            background: #666;
        }
        .status-indicator.open {
            background: #4CAF50;
        }
        .status-indicator.close {
            background: #666;
        }
        .status-indicator.stop {
            background: #FF5722;
        }
        .water-flow {
            margin-top: 20px;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            background: #f9f9f9;
        }
    </style>
</head>
<body>
    <h1>Arduino Mega Control</h1>

    <!-- Контролы и индикаторы -->
    <div class="control-group">
        <h2>Motor A1,A2 and A3,A4</h2>
        <button onclick="updateState('motorA1A2', 'up')">Up</button>
        <button onclick="updateState('motorA1A2', 'down')">Down</button>
        <button onclick="updateState('motorA1A2', 'stop')">Stop</button>
        <div id="motorA1A2-indicator" class="status-indicator"></div>
    </div>

    <div class="control-group">
        <h2>Motor 8,9 and 10,11</h2>
        <button onclick="updateState('motor8_11', 'up')">Up</button>
        <button onclick="updateState('motor8_11', 'down')">Down</button>
        <button onclick="updateState('motor8_11', 'stop')">Stop</button>
        <div id="motor8_11-indicator" class="status-indicator"></div>
    </div>

    <div class="control-group">
        <h2>Servo 2,3</h2>
        <button onclick="updateState('servo2_3', 'open')">Open</button>
        <button onclick="updateState('servo2_3', 'close')">Close</button>
        <div id="servo2_3-indicator" class="status-indicator"></div>
    </div>

    <div class="control-group">
        <h2>Servo 4,5</h2>
        <button onclick="updateState('servo4_5', 'open')">Open</button>
        <button onclick="updateState('servo4_5', 'close')">Close</button>
        <div id="servo4_5-indicator" class="status-indicator"></div>
    </div>

    <div class="control-group">
        <h2>LED 1</h2>
        <button onclick="updateState('led1', 'on')">On</button>
        <button onclick="updateState('led1', 'off')">Off</button>
        <div id="led1-indicator" class="status-indicator"></div>
    </div>

    <div class="control-group">
        <h2>LED 2</h2>
        <button onclick="updateState('led2', 'on')">On</button>
        <button onclick="updateState('led2', 'off')">Off</button>
        <div id="led2-indicator" class="status-indicator"></div>
    </div>

    <!-- Счетчик расхода воды и скорость потока -->
    <div class="water-flow">
        <h2>Water Flow</h2>
        <p>Total Water: <span id="total-water">0.00</span> liters</p>
        <p>Flow Rate: <span id="flow-rate">0.00</span> liters/min</p>
        <button onclick="resetWaterCounter()">Reset Water Counter</button>
    </div>

    <script>
        // Функция для обновления индикаторов
        function updateIndicators(states) {
            // Моторы
            document.getElementById('motorA1A2-indicator').className =
                `status-indicator ${states.motorA1A2 === 'up' ? 'on' : states.motorA1A2 === 'down' ? 'off' : 'stop'}`;
            document.getElementById('motor8_11-indicator').className =
                `status-indicator ${states.motor8_11 === 'up' ? 'on' : states.motor8_11 === 'down' ? 'off' : 'stop'}`;

            // Сервоприводы
            document.getElementById('servo2_3-indicator').className =
                `status-indicator ${states.servo2_3 === 'open' ? 'open' : 'close'}`;
            document.getElementById('servo4_5-indicator').className =
                `status-indicator ${states.servo4_5 === 'open' ? 'open' : 'close'}`;

            // Светодиоды
            document.getElementById('led1-indicator').className =
                `status-indicator ${states.led1 === 'on' ? 'on' : 'off'}`;
            document.getElementById('led2-indicator').className =
                `status-indicator ${states.led2 === 'on' ? 'on' : 'off'}`;
        }

        // Функция для обновления данных о расходе воды
        function updateWaterFlow(data) {
            document.getElementById('total-water').textContent = data.total_water.toFixed(2);
            document.getElementById('flow-rate').textContent = data.flow_rate.toFixed(2);
        }

        // Функция для сброса счетчика воды
        function resetWaterCounter() {
            fetch('/reset_water_counter', { method: 'POST' })
                .then(response => response.json())
                .then(data => {
                    console.log(data);
                    updateWaterFlow(data);
                })
                .catch(error => console.error('Error:', error));
        }

        // Загрузка начальных состояний
        fetch('/get_states')
            .then(response => response.json())
            .then(states => updateIndicators(states))
            .catch(error => console.error('Error:', error));

        // Загрузка начальных данных о расходе воды
        fetch('/get_water_flow')
            .then(response => response.json())
            .then(data => updateWaterFlow(data))
            .catch(error => console.error('Error:', error));

        // Функция для отправки команд
        function updateState(device, state) {
            fetch('/update_state', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ device, state }),
            })
            .then(response => response.json())
            .then(data => {
                console.log(data);
                // Обновляем индикаторы после успешного запроса
                fetch('/get_states')
                    .then(response => response.json())
                    .then(states => updateIndicators(states));
            })
            .catch(error => console.error('Error:', error));
        }

        // Периодическое обновление данных о расходе воды
        setInterval(() => {
            fetch('/get_water_flow')
                .then(response => response.json())
                .then(data => updateWaterFlow(data))
                .catch(error => console.error('Error:', error));
        }, 1000); // Обновление каждую секунду
    </script>
</body>
</html>

shluz.ino
#include <Servo.h>
#include <Wire.h>

// Параметры для сервоприводов
Servo servo1;
Servo servo2;
Servo servo3;
Servo servo4;

// Параметры для драйверов двигателей L9110S
int motor1Pin1 = 8;
int motor1Pin2 = 9;
int motor2Pin1 = 10;
int motor2Pin2 = 11;
int motor3Pin1 = A1;
int motor3Pin2 = A2;
int motor4Pin1 = A3;
int motor4Pin2 = A4;

// Датчик расхода воды
int flowSensorPin = A0;
volatile long pulseCount = 0;
float flowRate = 0.0;
float totalWater = 0.0;

// Светодиоды
int led1RedPin = A8;
int led1GreenPin = A9;
int led2RedPin = A10;
int led2GreenPin = A11;

// Реле
int relay1Pin = 22;
int relay2Pin = 24;
int relay3Pin = 26;
int relay4Pin = 28;

// I2C адрес силового ключа
#define I2C_KEY_ADDRESS 0x20

// Состояния устройств
bool motorA1A2State = false; // false - низ, true - верх
bool motor8_11State = false; // false - низ, true - верх
bool servo2_3State = false;  // false - закрыто, true - открыто
bool servo4_5State = false;  // false - закрыто, true - открыто
bool led1State = false;      // false - выключен, true - включен
bool led2State = false;      // false - выключен, true - включен

// Функция для управления сервоприводами
void controlServos(bool open2_3, bool open4_5) {
  if (open2_3) {
    servo1.write(90); // Открыто
    servo2.write(90);
  } else {
    servo1.write(0); // Закрыто
    servo2.write(0);
  }

  if (open4_5) {
    servo3.write(90); // Открыто
    servo4.write(90);
  } else {
    servo3.write(0); // Закрыто
    servo4.write(0);
  }
}

// Функция для управления моторами
void controlMotors(bool motorA1A2Up, bool motor8_11Up) {
  if (motorA1A2Up) {
    analogWrite(motor3Pin1, 255); // Верх
    analogWrite(motor3Pin2, 0);
    analogWrite(motor4Pin1, 255);
    analogWrite(motor4Pin2, 0);
  } else if (motor8_11Up) {
    analogWrite(motor1Pin1, 255); // Верх
    analogWrite(motor1Pin2, 0);
    analogWrite(motor2Pin1, 255);
    analogWrite(motor2Pin2, 0);
  } else {
    analogWrite(motor1Pin1, 0); // Остановка
    analogWrite(motor1Pin2, 0);
    analogWrite(motor2Pin1, 0);
    analogWrite(motor2Pin2, 0);
    analogWrite(motor3Pin1, 0);
    analogWrite(motor3Pin2, 0);
    analogWrite(motor4Pin1, 0);
    analogWrite(motor4Pin2, 0);
  }
}

// Функция для управления светодиодами
void controlLEDs(bool led1On, bool led2On) {
  digitalWrite(led1RedPin, led1On ? HIGH : LOW);
  digitalWrite(led1GreenPin, led1On ? HIGH : LOW);
  digitalWrite(led2RedPin, led2On ? HIGH : LOW);
  digitalWrite(led2GreenPin, led2On ? HIGH : LOW);
}

// Функция для управления реле
void controlRelays(bool relay2State, bool relay4State) {
  digitalWrite(relay2Pin, relay2State ? HIGH : LOW);
  digitalWrite(relay4Pin, relay4State ? HIGH : LOW);
}

// Функция для управления силовым ключом через I2C
void controlI2CKey(bool k1, bool k2, bool k4) {
  Wire.beginTransmission(I2C_KEY_ADDRESS);
  Wire.write((k1 ? 0x01 : 0x00) | (k2 ? 0x02 : 0x00) | (k4 ? 0x04 : 0x00));
  Wire.endTransmission();
}

// Функция для обработки прерываний от датчика расхода воды
void pulseCounter() {
  pulseCount++;
}

void setup() {
  // Инициализация сервоприводов
  servo1.attach(2);
  servo2.attach(3);
  servo3.attach(4);
  servo4.attach(5);

  // Инициализация моторов
  pinMode(motor1Pin1, OUTPUT);
  pinMode(motor1Pin2, OUTPUT);
  pinMode(motor2Pin1, OUTPUT);
  pinMode(motor2Pin2, OUTPUT);
  pinMode(motor3Pin1, OUTPUT);
  pinMode(motor3Pin2, OUTPUT);
  pinMode(motor4Pin1, OUTPUT);
  pinMode(motor4Pin2, OUTPUT);

  // Инициализация светодиодов
  pinMode(led1RedPin, OUTPUT);
  pinMode(led1GreenPin, OUTPUT);
  pinMode(led2RedPin, OUTPUT);
  pinMode(led2GreenPin, OUTPUT);

  // Инициализация реле
  pinMode(relay1Pin, OUTPUT);
  pinMode(relay2Pin, OUTPUT);
  pinMode(relay3Pin, OUTPUT);
  pinMode(relay4Pin, OUTPUT);

  // Инициализация I2C
  Wire.begin();

  // Инициализация датчика расхода воды
  pinMode(flowSensorPin, INPUT);
  attachInterrupt(digitalPinToInterrupt(flowSensorPin), pulseCounter, FALLING);

  // Инициализация Serial
  Serial.begin(9600);
  Serial.println("System started"); // Отладочное сообщение

    // Инициализация Serial
  Serial1.begin(9600);
  Serial1.println("Debug started"); // Отладочное сообщение
}

void loop() {
  // Обработка команд от Serial
  if (Serial.available()) {
    String command = Serial.readStringUntil('\n');
    command.trim();
    Serial1.println("Received: " + command); // Отладочное сообщение

  // Обработка команды запроса данных
    if (command == "GET_WATER_DATA") {
      // Отправляем данные сразу при получении запроса
      String data = String(totalWater) + "," + String(flowRate);
      Serial.println(data);
      Serial1.println(data);
    }
    // Управление моторами A1,A2 и A3,A4
    if (command == "MOTOR_A1A2_UP") {
      motorA1A2State = true;
      Serial.println("MOTOR_A1A2: UP");
    } else if (command == "MOTOR_A1A2_DOWN") {
      motorA1A2State = false;
      Serial.println("MOTOR_A1A2: DOWN");
    }

    // Управление моторами 8,9 и 10,11
    else if (command == "MOTOR_8_11_UP") {
      motor8_11State = true;
      Serial.println("MOTOR_8_11: UP");
    } else if (command == "MOTOR_8_11_DOWN") {
      motor8_11State = false;
      Serial.println("MOTOR_8_11: DOWN");
    }

    // Управление сервоприводами 2,3
    else if (command == "SERVO_2_3_OPEN") {
      servo2_3State = true;
      Serial.println("SERVO_2_3: OPEN");
    } else if (command == "SERVO_2_3_CLOSE") {
      servo2_3State = false;
      Serial.println("SERVO_2_3: CLOSE");
    }

    // Управление сервоприводами 4,5
    else if (command == "SERVO_4_5_OPEN") {
      servo4_5State = true;
      Serial.println("SERVO_4_5: OPEN");
    } else if (command == "SERVO_4_5_CLOSE") {
      servo4_5State = false;
      Serial.println("SERVO_4_5: CLOSE");
    }

    // Управление светодиодами
    else if (command == "LED1_ON") {
      led1State = true;
      Serial.println("LED1: ON");
    } else if (command == "LED1_OFF") {
      led1State = false;
      Serial.println("LED1: OFF");
    } else if (command == "LED2_ON") {
      led2State = true;
      Serial.println("LED2: ON");
    } else if (command == "LED2_OFF") {
      led2State = false;
      Serial.println("LED2: OFF");
    }
  }

  // Управление устройствами
  controlServos(servo2_3State, servo4_5State);
  controlMotors(motorA1A2State, motor8_11State);
  controlLEDs(led1State, led2State);

  int lastMeasurement;
  // Обновление данных датчика каждую секунду
  if (millis() - lastMeasurement >= 1000) {
    detachInterrupt(digitalPinToInterrupt(flowSensorPin));
    flowRate = pulseCount / 7.5f; // Для YF-S401: 7.5 импульсов/литр
    totalWater += flowRate / 60;
    pulseCount = 0;
    lastMeasurement = millis();
    attachInterrupt(digitalPinToInterrupt(flowSensorPin), pulseCounter, FALLING);
  }

  delay(100); // Задержка для стабильности
}